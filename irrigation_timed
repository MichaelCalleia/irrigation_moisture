/* 
  v3
  Arduino irrigation system
  Soil moisture
*/


/* global settings */

  /* Real Time Clock (RTC) Library 
  Date and time functions using a DS3231 RTC connected via I2C and Wire lib
  */
    // include the library code:
    #include "RTClib.h"

    RTC_DS3231 rtc;

  /*  Liquid Crystal Display (LCD) Library
    The circuit:
    * LCD RS pin to digital pin 12
    * LCD Enable pin to digital pin 11
    * LCD D4 pin to digital pin 5
    * LCD D5 pin to digital pin 4
    * LCD D6 pin to digital pin 3
    * LCD D7 pin to digital pin 2
    * LCD R/W pin to ground
    * LCD VSS pin to ground
    * LCD VDD pin to 5V
    * 10K resistor:
    * ends to +5V and ground
    * wiper to LCD VO pin (pin 3)

    https://docs.arduino.cc/learn/electronics/lcd-displays
    */
    // include the library code:
    #include <LiquidCrystal.h>

    // initialize the library by associating any needed LCD interface pin
    // with the arduino pin number it is connected to
    const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
    LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

  /* EEPROM library */
    // include EEPROM library
    #include <EEPROM.h>

    // the current address in the EEPROM (i.e. which byte we're going to write to next)
    int addr = 0;

  /* include soil moisture sensor library */
    #include "Adafruit_seesaw.h"
    Adafruit_seesaw ss;

  /* other global variables */

    // initialize the interface pin for Relay
    int RelayPin = 6; 

    // watering controls
    int moisture = 1010; // was 650, but plant was wilting, changed to 900, then to 1010
    int wateringlength = 650; //amount of time to water (run pump for 0.65 secends to diliver 0.5 fluid ounces)
    int wateringcount = 0; // set watering count to 0

    // Set times in Global
    DateTime current;

void setup () {
  Serial.begin(9600);

  /* Relay code */
    // Set RelayPin as an output pin
      pinMode(RelayPin, OUTPUT);

  /* LCD code */
    // set up the LCD's number of columns and rows:
    lcd.begin(16, 2);

    // clear the screen
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Initializing...");
    delay(3000); // pause to show message for 3 seconds
    lcd.clear();

  /* RTC code */
    #ifndef ESP8266
      while (!Serial); // wait for serial port to connect. Needed for native USB
    #endif

    if (! rtc.begin()) {
      Serial.println("Couldn't find RTC");
      Serial.flush();
      while (1) delay(10);
    }

    if (rtc.lostPower()) {
      Serial.println("RTC lost power, let's set the time!");
      // When time needs to be set on a new device, or after a power loss, the
      // following line sets the RTC to the date & time this sketch was compiled
      rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }

    // Get the time
    current = rtc.now();

  /* Moisture Sensor code */
    // set up sensor
    if (!ss.begin(0x36)) {
      lcd.print("ERROR! seesaw not found");
      while(1) delay(1);
    } else {
      lcd.print("seesaw started! version: ");
      lcd.print(ss.getVersion(), HEX);
    }
    delay(3000); // pause to show message for 3 seconds
	
  /* LCD code, again */
    // clear the screen
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Ready");
    delay(3000); // pause to show message for 3 seconds

    // clear the screen
    lcd.clear();
 
    // set LCD cursor to column 0, line 0 
    // print the currnet time 
    lcd.setCursor(0, 0);
    printCurrentDateime ();

    // set LCD cursor to column 0, line 1 
    // print the number of time the plant has been watered
    lcd.setCursor(0, 1);
    printWateringCount();
}

void loop () {
   
   // take the moisture levil of the soil, capread or capacitive read is how moist the soil is
    uint16_t capread = ss.touchRead(0);
    Serial.println("Capacitive: "); Serial.println(capread);

    Serial.print("Count: ");
    Serial.println (wateringcount);

   
   //looks at how moist the soil is and waters it if it is getting dry
   if (capread <= moisture){ 

    // clear the screen
    lcd.clear();

    /* Water the plant */

    // Turn on the relay to water plant
    digitalWrite(RelayPin, HIGH);
    delay(wateringlength); // run pump for wateringlength

    // Turn off the relay
    digitalWrite(RelayPin, LOW);
  
    //get the time
    current = rtc.now();

    /* Add +1 to number of time the plant has been watered */
    wateringcount = wateringcount + 1;

    /* update LCD */
    // print date and time of last watering, and number of times the plant was watered

    // clear the screen
    lcd.clear();
    delay(1000);
    lcd.begin(16, 2);

    // set LCD cursor to column 0, line 0 
    // LCD has 16 characters and 2 rows
    // line 0 is the first row, line 1 is the second row
    lcd.setCursor(0, 0);
    printCurrentDateime();

    // print the number of time the plant has been watered
    // set LCD cursor to column 0, line 1 
    lcd.setCursor(0, 1);
    printWateringCount ();

    /* write data to EEPROM, date/time of each watering */
    // build a string combining the data and converting to binary to save space
    String data = "";
    if (current.month() < 10){ data += ('0'); }
    data += String(current.month(), DEC); 
    if (current.day() < 10){ data += ('0'); }
    data += String(current.day(), DEC); 
    if (current.hour() < 10){ data += ('0'); }
    data += String(current.hour(), DEC);
    if (current.minute() < 10){ data += ('0'); }
    data += String(current.minute(), DEC);

   // Write the string data to EEPROM
    for (int i = 0; i < data.length(); i++) {
        EEPROM.put(addr + i, data[i]);
    }

    // Update the start address for next write to avoid overwriting
    addr += data.length();  // Use the length of the data instead of a fixed number
    if (addr >= EEPROM.length() - data.length()) {  // Check to avoid EEPROM overflow
        addr = 0; // Reset address or handle as needed
    }
    
  }

 delay(60000);

}

void printCurrentDateime () {
    // month
    if (current.month() < 10){
      lcd.print('0');
    }
    lcd.print(current.month(), DEC);
    lcd.print('/');
    // day
    if (current.day() < 10){
      lcd.print('0');
    }
    lcd.print(current.day(), DEC);
    lcd.print(" ");
    // hour
    if (current.hour() < 10){
      lcd.print('0');
    }
    lcd.print(current.hour(), DEC);
    lcd.print(':');
    //minute
    if (current.minute() < 10){
      lcd.print('0');
    }
    
    lcd.print(current.minute(), DEC);
}

void printTemp () {
  lcd.print("Temp: ");
    byte celsius = (rtc.getTemperature());
    byte fahrenheit = (celsius * 9) / 5 + 32;
    lcd.print (fahrenheit);
    lcd.print(" F");
}

void printWateringCount () {
    lcd.print("Count: ");
    lcd.print (wateringcount);
}
